import sqlite3
import logging
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, filters
import warnings
import os

# –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
warnings.filterwarnings("ignore", category=DeprecationWarning)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN = "8188336261:AAEFx--KbsYpytvRE4AE0nELkIVrSK9uhbE"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
ADMIN_USER_IDS = [6772666050, 7610385492] # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram User ID

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---
class ProfitBotDB:
    def __init__(self, db_path="profit_bot.db"):
        self.db_path = db_path
        self.init_database()

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()

                # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS rates (
                        user_name TEXT PRIMARY KEY,
                        rate REAL
                    )
                ''')

                # –¢–∞–±–ª–∏—Ü–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—â–µ–π –∏ –¥–Ω–µ–≤–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS balances (
                        user_name TEXT PRIMARY KEY,
                        total_profit REAL DEFAULT 0,
                        daily_profit REAL DEFAULT 0
                    )
                ''')

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
                users = {
                    'butch': 30.0,
                    'jules': 20.0,
                    'vincent': 20.0
                }
                
                for user, rate in users.items():
                    cursor.execute('''
                        INSERT OR IGNORE INTO rates (user_name, rate) VALUES (?, ?)
                    ''', (user, rate))
                    cursor.execute('''
                        INSERT OR IGNORE INTO balances (user_name, total_profit, daily_profit) VALUES (?, ?, ?)
                    ''', (user, 0.0, 0.0))
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–∞
                cursor.execute('''
                    INSERT OR IGNORE INTO balances (user_name, total_profit, daily_profit) VALUES (?, ?, ?)
                ''', ('reserve', 0.0, 0.0))

                conn.commit()
                logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    def get_rates(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT user_name, rate FROM rates')
            return dict(cursor.fetchall())

    def get_balances(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT user_name, total_profit, daily_profit FROM balances')
            return {row[0]: {'total': row[1], 'daily': row[2]} for row in cursor.fetchall()}

    def update_balance(self, user_name, amount):
        """–î–æ–±–∞–≤–∏—Ç—å —Å—É–º–º—É –∫ –æ–±—â–µ–º—É –∏ –¥–Ω–µ–≤–Ω–æ–º—É –±–∞–ª–∞–Ω—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE balances
                SET total_profit = total_profit + ?, daily_profit = daily_profit + ?
                WHERE user_name = ?
            ''', (amount, amount, user_name))
            conn.commit()

    def set_rate(self, user_name, rate):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR REPLACE INTO rates (user_name, rate) VALUES (?, ?)
            ''', (user_name, rate))
            conn.commit()

    def reset_daily_profits(self):
        """–û–±–Ω—É–ª–∏—Ç—å –≤—Å—é –¥–Ω–µ–≤–Ω—É—é –ø—Ä–∏–±—ã–ª—å."""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE balances SET daily_profit = 0')
            conn.commit()

# --- –Ø–¥—Ä–æ –±–æ—Ç–∞ ---
try:
    db = ProfitBotDB()
except Exception as e:
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞: {e}")
    exit(1)

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    return user_id in ADMIN_USER_IDS

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª—å—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    help_text = """
üìä **–ö–æ–º–∞–Ω–¥—ã –ë–æ—Ç–∞-–§–∏–Ω–∞–Ω—Å–∏—Å—Ç–∞**

*–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:*
- `/add [—Å—É–º–º–∞]` - –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –∏—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º.
- `/stats` - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã –∏ –¥–Ω–µ–≤–Ω—ã–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
- `/morning` - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –¥–µ–Ω—å –∏ –æ–±–Ω—É–ª—è–µ—Ç –¥–Ω–µ–≤–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏.
- `/finish` - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å –∏ –æ–±–Ω—É–ª—è–µ—Ç –¥–Ω–µ–≤–Ω—ã–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è.

*–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*
- `/set_rate [–∏–º—è] [–ø—Ä–æ—Ü–µ–Ω—Ç]` - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–Ω–∞–ø—Ä., `/set_rate butch 35`).
"""
    await update.message.reply_text(help_text)

async def set_rate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    try:
        if len(context.args) != 2:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_rate [–∏–º—è] [–ø—Ä–æ—Ü–µ–Ω—Ç]")
            return

        user_name = context.args[0].lower()
        rate = float(context.args[1])
        
        if rate < 0 or rate > 100:
            await update.message.reply_text("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100.")
            return

        valid_users = ['butch', 'jules', 'vincent']
        if user_name not in valid_users:
            await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∏–º–µ–Ω–∞: {', '.join(valid_users)}")
            return

        db.set_rate(user_name, rate)
        
        rates = db.get_rates()
        total_rate = sum(rates.values())
        
        if total_rate > 100:
            await update.message.reply_text(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –°—É–º–º–∞—Ä–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç 100% ({total_rate:.1f}%). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã.")
        elif total_rate < 100:
            reserve_rate = 100 - total_rate
            await update.message.reply_text(f"‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è {user_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {rate:.1f}%. –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–∑–µ—Ä–≤–∞ —Ç–µ–ø–µ—Ä—å {reserve_rate:.1f}%.")
        else:
            await update.message.reply_text(f"‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è {user_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {rate:.1f}%. –°—É–º–º–∞—Ä–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–æ–≤–Ω–æ 100%.")

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /set_rate: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞.")

async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—É–º–º—É –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –∏—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º."""
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    try:
        if len(context.args) != 1:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add [—Å—É–º–º–∞]")
            return

        amount = float(context.args[0])
        if amount <= 0:
            await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
            return

        rates = db.get_rates()
        total_rate = sum(rates.values())
        
        if total_rate > 100:
            await update.message.reply_text("‚ùå –°—É–º–º–∞—Ä–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç 100%. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã.")
            return

        # –†–∞—Å—á–µ—Ç —Å—É–º–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        distributions = {}
        for user_name, rate in rates.items():
            distributed_amount = amount * (rate / 100)
            distributions[user_name] = distributed_amount
            db.update_balance(user_name, distributed_amount)
        
        # –†–∞—Å—á–µ—Ç –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ —Ä–µ–∑–µ—Ä–≤
        reserve_rate = 100 - total_rate
        if reserve_rate > 0:
            reserve_amount = amount * (reserve_rate / 100)
            distributions['reserve'] = reserve_amount
            db.update_balance('reserve', reserve_amount)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        message = f"üí∞ **{amount:.2f}$ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ!**\n\n"
        for user_name, dist_amount in distributions.items():
            message += f"‚Ä¢ **{user_name.capitalize()}**: +{dist_amount:.2f}$\n"
        
        await update.message.reply_text(message, parse_mode='Markdown')

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /add: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Å—É–º–º—ã.")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
    try:
        balances = db.get_balances()
        rates = db.get_rates()
        
        message = "üìä **–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
        message += "--- **–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å** ---\n"
        for user_name, balance in balances.items():
            message += f"‚Ä¢ **{user_name.capitalize()}**: {balance['total']:.2f}$"
            if user_name != 'reserve':
                message += f" ({rates.get(user_name, 0):.1f}%)"
            message += "\n"
        
        message += "\n--- **–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è** ---\n"
        for user_name, balance in balances.items():
            message += f"‚Ä¢ **{user_name.capitalize()}**: +{balance['daily']:.2f}$\n"

        await update.message.reply_text(message, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /stats: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def finish_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω—É—é –ø—Ä–∏–±—ã–ª—å."""
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–æ —Å–±—Ä–æ—Å–∞
        balances = db.get_balances()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = "‚úÖ **–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å**\n\n"
        message += f"**–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y')}\n\n"

        for user_name, balance in balances.items():
            message += f"‚Ä¢ **{user_name.capitalize()}**: –û–±—â–∞—è: {balance['total']:.2f}$ | –î–Ω–µ–≤–Ω–∞—è: +{balance['daily']:.2f}$\n"

        # –û–±–Ω—É–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
        db.reset_daily_profits()
        
        await update.message.reply_text(message, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /finish: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≤–µ–¥–µ–Ω–∏–∏ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è.")

async def morning_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω—É–ª—è–µ—Ç –¥–Ω–µ–≤–Ω—É—é –ø—Ä–∏–±—ã–ª—å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞)."""
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–æ —Å–±—Ä–æ—Å–∞
        balances = db.get_balances()

        message = "‚òÄÔ∏è **–£—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á—ë—Ç**\n\n"
        message += f"**–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y')}\n\n"
        message += "--- **–ë–∞–ª–∞–Ω—Å—ã** ---\n"

        for user_name, balance in balances.items():
            message += f"‚Ä¢ **{user_name.capitalize()}**: {balance['total']:.2f}$\n"

        message += "\n--- **–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –¥–µ–Ω—å** ---\n"
        for user_name, balance in balances.items():
            message += f"‚Ä¢ **{user_name.capitalize()}**: +{balance['daily']:.2f}$\n"
        
        # –û–±–Ω—É–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
        db.reset_daily_profits()
        
        await update.message.reply_text(message, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /morning: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ—Ç—á—ë—Ç–∞.")


def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    if BOT_TOKEN == "YOUR_BOT_TOKEN":
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –≤ —Å–∫—Ä–∏–ø—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω.")
        return
    
    if ADMIN_USER_IDS == [123456789]:
        print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–º–µ–Ω–∏—Ç–µ 'YOUR_ADMIN_ID' –Ω–∞ –≤–∞—à Telegram User ID, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("add", add_command))
        application.add_handler(CommandHandler("stats", stats_command))
        application.add_handler(CommandHandler("finish", finish_command))
        application.add_handler(CommandHandler("morning", morning_command))
        application.add_handler(CommandHandler("set_rate", set_rate_command))
        
        print("‚úÖ –ë–æ—Ç-–§–∏–Ω–∞–Ω—Å–∏—Å—Ç –∑–∞–ø—É—â–µ–Ω!")
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞.")
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
        application.run_polling(drop_pending_updates=True)
    
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()